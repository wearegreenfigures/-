import React, { useState } from 'react';
import { BarChart, Bar, PieChart, Pie, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';

// 탄소 배출량 계수 (kgCO2e per unit)
const EMISSION_FACTORS = {
  transportation: {
    '도보': 0,
    '자전거': 0,
    '오토바이': 0.103,
    '지하철': 0.041,
    '기차 (KTX)': 0.058,
    '기차 (일반)': 0.028,
    '버스': 0.105,
    '셔틀버스': 0.105,
    '택시': 0.147,
    '승용차 (내연기관)': 0.175,
    '승용차 (전기차)': 0.053,
    '비행기': 0.255,
    '여객선': 0.19
  },
  energy: {
    '기존 전력망': 0.466, // kgCO2e per kWh
    '발전기 (디젤)': 2.68, // kgCO2e per liter
    '발전기 (휘발유)': 2.31 // kgCO2e per liter
  },
  waste: {
    '일반 쓰레기': 0.58, // kgCO2e per kg
    '재활용 쓰레기': 0.95, 
    '음식물 쓰레기': 2.5,
    '특수 폐기물': 4.1
  }
};

// 색상 팔레트
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#8dd1e1', '#a4de6c', '#d0ed57', '#ffc658'];

const FestivalCarbonCalculator = () => {
  // 기본 정보 상태
  const [basicInfo, setBasicInfo] = useState({
    name: '',
    days: 1,
    participants: 0,
  });

  // 교통 데이터 상태
  const [transportationData, setTransportationData] = useState(
    Object.keys(EMISSION_FACTORS.transportation).map(type => ({
      type,
      distance: 0, // km
    }))
  );

  // 에너지 데이터 상태
  const [energyData, setEnergyData] = useState(
    Object.keys(EMISSION_FACTORS.energy).map(type => ({
      type,
      amount: 0, // kWh or liter
    }))
  );

  // 폐기물 데이터 상태
  const [wasteData, setWasteData] = useState(
    Object.keys(EMISSION_FACTORS.waste).map(type => ({
      type,
      amount: 0, // kg
    }))
  );

  // 계산 결과 상태
  const [results, setResults] = useState(null);

  // 폼 제출 시 계산 수행
  const calculateEmissions = (e) => {
    if (e) e.preventDefault();
    
    // 교통 배출량 계산
    const transportationEmissions = transportationData.map(item => ({
      type: item.type,
      emission: EMISSION_FACTORS.transportation[item.type] * item.distance
    }));
    
    const totalTransportationEmission = transportationEmissions.reduce((acc, item) => acc + item.emission, 0);
    
    // 에너지 배출량 계산
    const energyEmissions = energyData.map(item => ({
      type: item.type,
      emission: EMISSION_FACTORS.energy[item.type] * item.amount
    }));
    
    const totalEnergyEmission = energyEmissions.reduce((acc, item) => acc + item.emission, 0);
    
    // 폐기물 배출량 계산
    const wasteEmissions = wasteData.map(item => ({
      type: item.type,
      emission: EMISSION_FACTORS.waste[item.type] * item.amount
    }));
    
    const totalWasteEmission = wasteEmissions.reduce((acc, item) => acc + item.emission, 0);
    
    // 총 배출량 계산
    const totalEmission = totalTransportationEmission + totalEnergyEmission + totalWasteEmission;
    
    // 결과 설정
    setResults({
      festivalName: basicInfo.name,
      totalEmission,
      dailyEmission: totalEmission / basicInfo.days,
      perParticipantEmission: totalEmission / basicInfo.participants,
      categoryEmissions: [
        { name: '이동 / 교통', value: totalTransportationEmission },
        { name: '에너지', value: totalEnergyEmission },
        { name: '폐기물', value: totalWasteEmission }
      ],
      transportationEmissions,
      energyEmissions,
      wasteEmissions
    });
  };

  // 기본 정보 입력 핸들러
  const handleBasicInfoChange = (e) => {
    const { name, value } = e.target;
    setBasicInfo(prev => ({
      ...prev,
      [name]: name === 'name' ? value : Number(value)
    }));
  };

  // 교통 데이터 입력 핸들러
  const handleTransportationChange = (index, value) => {
    const newData = [...transportationData];
    newData[index].distance = Number(value);
    setTransportationData(newData);
  };

  // 에너지 데이터 입력 핸들러
  const handleEnergyChange = (index, value) => {
    const newData = [...energyData];
    newData[index].amount = Number(value);
    setEnergyData(newData);
  };

  // 폐기물 데이터 입력 핸들러
  const handleWasteChange = (index, value) => {
    const newData = [...wasteData];
    newData[index].amount = Number(value);
    setWasteData(newData);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-6xl mx-auto">
        <header className="text-center py-8">
          <h1 className="text-3xl font-bold text-green-800">
            축제 (이벤트) 탄소배출량 계산기 
            <span className="text-lg ml-2 bg-green-100 text-green-700 px-2 py-1 rounded-md">초급용</span>
          </h1>
          <div className="mt-4 text-xs">
            <ul className="list-disc list-inside text-left max-w-xl mx-auto">
              <li className="my-1">이 계산기는 (재)숲과나눔, 사회복지공동모금회 사랑의열매와 함께하는 '초록열매 3기' 사업으로 개발되었습니다.</li>
              <li className="my-1">이 초급용 계산기는 처음 모니터링을 시작하는 축제 (이벤트)에 적합합니다.</li>
              <li className="my-1">문의나 요청, 지속가능한 축제 모니터링에 관한 협업 제안은 <span className="font-bold">civichub2.0@gmail.com</span> 로 메일을 보내주세요.</li>
            </ul>
          </div>
        </header>

        {!results ? (
          <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
            {/* 기본 정보 입력 */}
            <div className="mb-8">
              <h2 className="text-xl font-semibold mb-4 pb-2 border-b border-gray-200 text-green-700">축제 (이벤트) 기본 정보</h2>
              <div className="grid md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">축제 (이벤트) 이름</label>
                  <input
                    type="text"
                    name="name"
                    value={basicInfo.name}
                    onChange={handleBasicInfoChange}
                    className="w-full p-2 border border-gray-300 rounded"

                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">축제 (이벤트) 일수</label>
                  <input
                    type="number"
                    name="days"
                    min="1"
                    value={basicInfo.days}
                    onChange={handleBasicInfoChange}
                    className="w-full p-2 border border-gray-300 rounded"

                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">참가자 수</label>
                  <input
                    type="number"
                    name="participants"
                    min="1"
                    value={basicInfo.participants}
                    onChange={handleBasicInfoChange}
                    className="w-full p-2 border border-gray-300 rounded"

                  />
                </div>
              </div>
            </div>

            {/* 이동/교통 입력 */}
            <div className="mb-8">
              <h2 className="text-xl font-semibold mb-4 pb-2 border-b border-gray-200 text-green-700">이동 / 교통</h2>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="bg-gray-50">
                      <th className="p-2 text-left">교통수단</th>
                      <th className="p-2 text-left">총 거리 (km)</th>
                    </tr>
                  </thead>
                  <tbody>
                    {transportationData.map((item, index) => (
                      <tr key={item.type} className="border-b border-gray-100">
                        <td className="p-2">{item.type}</td>
                        <td className="p-2">
                          <input
                            type="number"
                            min="0"
                            value={item.distance}
                            onChange={(e) => handleTransportationChange(index, e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded"
                          />
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* 에너지 입력 */}
            <div className="mb-8">
              <h2 className="text-xl font-semibold mb-4 pb-2 border-b border-gray-200 text-green-700">에너지</h2>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="bg-gray-50">
                      <th className="p-2 text-left">에너지원</th>
                      <th className="p-2 text-left">사용량</th>
                    </tr>
                  </thead>
                  <tbody>
                    {energyData.map((item, index) => (
                      <tr key={item.type} className="border-b border-gray-100">
                        <td className="p-2">
                          {item.type === '기존 전력망' ? `${item.type} (kWh)` : 
                           item.type === '발전기 (디젤)' ? `${item.type} (L)` :
                           item.type === '발전기 (휘발유)' ? `${item.type} (L)` : item.type}
                        </td>
                        <td className="p-2">
                          <input
                            type="number"
                            min="0"
                            value={item.amount}
                            onChange={(e) => handleEnergyChange(index, e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded"
                          />
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* 폐기물 입력 */}
            <div className="mb-8">
              <h2 className="text-xl font-semibold mb-4 pb-2 border-b border-gray-200 text-green-700">폐기물</h2>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="bg-gray-50">
                      <th className="p-2 text-left">폐기물 종류</th>
                      <th className="p-2 text-left">배출량</th>
                    </tr>
                  </thead>
                  <tbody>
                    {wasteData.map((item, index) => (
                      <tr key={item.type} className="border-b border-gray-100">
                        <td className="p-2">
                          {item.type === '일반 쓰레기' ? `${item.type} (kg)` : 
                           item.type === '재활용 쓰레기' ? `${item.type} (kg)` :
                           item.type === '음식물 쓰레기' ? `${item.type} (kg)` :
                           item.type === '특수 폐기물' ? `${item.type} (kg)` : item.type}
                        </td>
                        <td className="p-2">
                          <input
                            type="number"
                            min="0"
                            value={item.amount}
                            onChange={(e) => handleWasteChange(index, e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded"
                          />
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            <div className="text-center mt-6">
              <button
                onClick={calculateEmissions}
                type="button"
                className="px-6 py-3 bg-green-600 text-white font-medium rounded hover:bg-green-700 transition duration-200"
              >
                탄소배출량 계산하기
              </button>
            </div>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h2 className="text-2xl font-bold mb-6 text-center text-green-800">
              {results.festivalName} 탄소배출량 보고서
            </h2>

            {/* 요약 정보 */}
            <div className="grid md:grid-cols-3 gap-4 mb-8">
              <div className="bg-gray-50 p-4 rounded shadow">
                <h3 className="text-lg font-semibold mb-2 text-green-700">총 탄소배출량</h3>
                <p className="text-3xl font-bold">{Math.round(results.totalEmission).toLocaleString()} kgCO2e</p>
              </div>
              <div className="bg-gray-50 p-4 rounded shadow">
                <h3 className="text-lg font-semibold mb-2 text-green-700">일일 탄소배출량</h3>
                <p className="text-3xl font-bold">{Math.round(results.dailyEmission).toLocaleString()} kgCO2e</p>
              </div>
              <div className="bg-gray-50 p-4 rounded shadow">
                <h3 className="text-lg font-semibold mb-2 text-green-700">참가자 1인당 배출량</h3>
                <p className="text-3xl font-bold">{results.perParticipantEmission.toFixed(2)} kgCO2e</p>
              </div>
            </div>

            {/* 1차 카테고리별 배출량 파이 차트 */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold mb-4 text-green-700">1차 카테고리별 탄소배출량 분포</h3>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={results.categoryEmissions}
                      cx="50%"
                      cy="50%"
                      labelLine={true}
                      label={({ name, percent }) => `${name} (${(percent * 100).toFixed(1)}%)`}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {results.categoryEmissions.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => `${Math.round(value).toLocaleString()} kgCO2e`} />
                    <Legend />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* 교통 수단별 배출량 */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold mb-4 text-green-700">이동 / 교통 수단별 탄소배출량 분포</h3>
              <div className="h-96">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={results.transportationEmissions.filter(item => item.emission > 0)}
                    layout="vertical"
                    margin={{ top: 5, right: 30, left: 100, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" />
                    <YAxis dataKey="type" type="category" width={80} />
                    <Tooltip formatter={(value) => `${Math.round(value).toLocaleString()} kgCO2e`} />
                    <Legend />
                    <Bar dataKey="emission" fill="#0088FE" name="탄소배출량 (kgCO2e)" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* 에너지 원별 배출량 */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold mb-4 text-green-700">에너지 전력 사용수단별 탄소배출량 분포</h3>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={results.energyEmissions.filter(item => item.emission > 0)}
                    margin={{ top: 5, right: 30, left: 100, bottom: 5 }}
                    layout="vertical"
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" />
                    <YAxis dataKey="type" type="category" width={120} />
                    <Tooltip formatter={(value) => `${Math.round(value).toLocaleString()} kgCO2e`} />
                    <Legend />
                    <Bar dataKey="emission" fill="#00C49F" name="탄소배출량 (kgCO2e)" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* 폐기물 종류별 배출량 */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold mb-4 text-green-700">폐기물 종류별 탄소배출량 분포</h3>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={results.wasteEmissions.filter(item => item.emission > 0)}
                    margin={{ top: 5, right: 30, left: 100, bottom: 5 }}
                    layout="vertical"
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" />
                    <YAxis dataKey="type" type="category" width={80} />
                    <Tooltip formatter={(value) => `${Math.round(value).toLocaleString()} kgCO2e`} />
                    <Legend />
                    <Bar dataKey="emission" fill="#FFBB28" name="탄소배출량 (kgCO2e)" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="text-center mt-8">
              <button
                onClick={() => setResults(null)}
                className="px-6 py-3 bg-gray-600 text-white font-medium rounded hover:bg-gray-700 transition duration-200"
              >
                새로운 계산하기
              </button>
            </div>
          </div>
        )}

        <footer className="text-center py-6 text-gray-500 text-sm">
          © 축제 (이벤트) 탄소배출량 계산기 | 그린피겨스 GREEN FIGURES
        </footer>
      </div>
    </div>
  );
};

export default FestivalCarbonCalculator;
